class Solution {
public:
    
    vector<int> parent;
    
    int find(int x){
        if(parent[x]==x)
            return x;
        return parent[x]=find(parent[x]);
    }
    
    vector<int> unite(int x,int y){
        
        int s1=find(x);
        int s2=find(y);
        
        if(s1!=s2){
            parent[s2]=s1;
            return {};
        }
        return {x,y};
    }
    
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        
        int n = edges.size();
        parent.resize(n+1);
        for(int i=0;i<=n;i++)
            parent[i]=i;
        
        vector<int> temp;
        vector<int> ans;
        
        for(int i=0;i<edges.size();i++){
            int x = edges[i][0];
            int y = edges[i][1];
            
            temp = unite(x,y);
            if(temp.size()>0)
                ans = temp;
        }
        return ans;
    }
};
